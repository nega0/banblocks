#!/usr/bin/env perl
# -*- mode: cperl -*-

# Copyright (C) 2017  nega0 <nega0@users.noreply.github.com>

# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__PACKAGE__->run() unless caller();

#use Smart::Comments;
use Net::CIDR;
use Getopt::Std;
use IPTables::Parse;
use warnings;
use strict;

our $ar;  ## FIXME: global variable

## Process cmdline options
sub run {
  $main::VERSION = '0.9';
  $Getopt::Std::STANDARD_HELP_VERSION = 1;
  our ($opt_f, $opt_i, $opt_v, $opt_h);

  sub main::HELP_MESSAGE {
    my $fh = shift;
    my $hd =  << "HERE";
Usage: $0 -i <interface> -f <rules file>

The following single-character options are accepted:
	-f <rules file>		A file containing the current iptables rules
	-i <interface>		Interface name to write the rules for
	-v			Verbose. Show IPs that get skipped because
				they're already banned.

HERE
    if ($fh) {
      print $fh $hd;
    } else {
      print STDOUT $hd;
    }
  };

  getopts('hf:i:v');
  if ($opt_h) {
    main::HELP_MESSAGE();
    exit;
  }
  die "[*] -i is a required option.\n[*] I need to know what interface to write rules for,"
    unless $opt_i;
  die "[*] -f is a required option.\n[*] I need to read existing rules from a file,"
    unless $opt_f;

  ## let's get to work
  $ar = init_ban_blocks($opt_f);
  ### $ar: ref($ar)
  ### $ar

  my $new_bans = [];
  while (<>) {
    chomp;
    next if(!$_);
    my $ip = $_;
    if (already_banned($ip)) {
      print "Skipping $ip (already fits in a banned block)...\n" if $opt_v;
      next;
    }

    my $block = get_block($ip);
    ### $block
    if (not $block) {
      warn "Errors fetching whois info for $ip: $!";
      next;
    }

    push @{$ar}, $block;
    push @{$new_bans},   $block;
  }

  foreach my $b (@{$new_bans}) {
    #printf "iptables -A TEMP_BLOCK -i $if -s $r -j DROP -m comment --comment '$d'\n";
    printf "iptables -A TEMP_BLOCK -i $opt_i -s $b -j DROP\n";
  }

}                               ## sub run
1;

sub get_block {
  my $ip = shift;
  ### fetching whois for $ip...
  my @w = grep {/^inetnum|NetRange|\[Network Number\]|^IPv4 Address|^descr/} `whois $ip 2>/dev/null`;
  chomp @w;
  ### @w: @w
  if ($#w+1) {
    my ($e, $r) = split /:|[]]/x, shift @w;
    if ($r =~ /[)]/x) { ## KRNIC adds f.e. (/11) to the end of its ^IPv4 lines
      $r =~ s/\s+\S*$//x;
    }
    ### $r: $r
    return Net::CIDR::cidrvalidate(Net::CIDR::range2cidr(trim($r)));
  }
  return;
}

sub trim {
  return $_[0] =~ s/^\s+|\s+$//rgx;
}

sub already_banned {
  ### $_: $_
  my $ip = Net::CIDR::cidrvalidate(shift);
  ### $ip: $ip
  ### @{$ar}: @{$ar}
  die "[*] Not a valid $ip: $!" unless $ip;
  return Net::CIDR::cidrlookup($ip, @{$ar}) ? 1 : 0;
}

sub init_ban_blocks {
  my $file = shift;
  ### $file: $file

  my $ipt_obj = new IPTables::Parse()
    or die '[*] Could not acquire IPTables::Parse object';

  my $table = 'filter';
  my $chain = 'TEMP_BLOCK';

  my ($ipt_hr, $rv) = $ipt_obj->chain_rules($table, $chain, $file);
  ### $ipt_hr: ref($ipt_hr)
  ### $rv
  my $ban_blocks = [];
  foreach my $i (@{$ipt_hr}) {
    push @{$ban_blocks}, Net::CIDR::cidrvalidate($i->{src}) if $i->{src};
  }

  ### $ban_blocks
  if (@{$ban_blocks}) {
    ### returning \$ban_blocks...
    return $ban_blocks;
  }
  ### returning void...
  return;
}
